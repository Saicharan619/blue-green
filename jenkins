pipeline {
    agent any
    environment {
        ZONE = "us-central1-c"
        IMAGE_NAME = "sample1"
        CLUSTER_NAME = "cluster-2"
        GOOGLE_APPLICATION_CREDENTIALS = credentials('gcp-key')
        GREEN_DEPLOY = "green.yaml"
        BLUE_DEPLOY = "blue.yaml"
    }

    stages {
        stage('Docker Login') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-hub', 
                                                  usernameVariable: 'DOCKER_USER', 
                                                  passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                    echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                    '''
                }
            }
        }

        stage('GCP Login') {
            steps {
                sh 'gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS'
            }
        }

        stage('Build Docker Image') {
            steps {
                sh '''
                docker build -t "$IMAGE_NAME" .
                docker tag "$IMAGE_NAME" sukanya996/$IMAGE_NAME:$BUILD_NUMBER
                '''
            }
        }

        stage('Push Docker Image') {
            steps {
                sh 'docker push sukanya996/$IMAGE_NAME:$BUILD_NUMBER'
            }
        }

        stage('Update Deployment Files') {
            steps {
                sh '''
                sed -i "s|image: .*|image: sukanya996/${IMAGE_NAME}:${BUILD_NUMBER}|" $GREEN_DEPLOY
                sed -i "s|image: .*|image: sukanya996/${IMAGE_NAME}:${BUILD_NUMBER}|" $BLUE_DEPLOY
                '''
            }
        }

        stage('Terraform Apply (Cluster)') {
            steps {
                sh '''
                terraform init
                terraform plan
                terraform apply --auto-approve
                '''
            }
        }

        stage('Wait for Cluster Access') {
            steps {
                retry(3) {
                    sh '''
                    sleep 10
                    gcloud container clusters get-credentials $CLUSTER_NAME --zone $ZONE --project plated-epigram-452709-h6
                    '''
                }
            }
        }

        stage('Deploy to Green') {
            steps {
                sh 'kubectl apply -f $GREEN_DEPLOY'
            }
        }

        stage('Validation (Green)') {
            steps {
                sh '''
                echo "Waiting for app to be ready..."
                sleep 20
                # You can add curl tests or readiness probes here
                '''
            }
        }

        stage('Switch Traffic to Green') {
            steps {
                sh '''
                kubectl patch svc flask-service -p '{"spec": {"selector": {"app": "sample1", "version": "green"}}}'
                '''
            }
        }

        stage('Delete Blue Deployment (Optional)') {
            steps {
                sh '''
                kubectl delete -f $BLUE_DEPLOY || echo "No blue deployment found"
                '''
            }
        }

        stage('Get Service') {
            steps {
                sh 'kubectl get svc'
            }
        }
    }
}
