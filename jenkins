pipeline {
    agent any

    environment {
        GOOGLE_CREDENTIALS = credentials('gcp-key') // service account key
        DOCKER_CREDS = credentials('dockerhub')
        KUBECONFIG = 'kubeconfig.yaml'
    }

    stages {
        stage('Clone Repo') {
            steps {
                git branch: 'main', url: 'https://github.com/Sukanya992/blue-green.git'            }
        }

        stage('Terraform Init & Apply') {
            steps {
                dir('terraform') {
                    withEnv(["GOOGLE_APPLICATION_CREDENTIALS=${GOOGLE_CREDENTIALS}"]) {
                        sh '''
                          terraform init
                          terraform apply -auto-approve \
                            -var="project_id=plated-epigram-452709-h6" \
                            -var="region=us-central1"
                        '''
                    }
                }
            }
        }

        stage('Configure Kubeconfig') {
            steps {
                withEnv(["GOOGLE_APPLICATION_CREDENTIALS=${GOOGLE_CREDENTIALS}"]) {
                    sh '''
                      gcloud auth activate-service-account --key-file=${GOOGLE_APPLICATION_CREDENTIALS}
                      gcloud container clusters get-credentials blue-green-cluster --region us-central1 --project your-gcp-project
                      cp ~/.kube/config kubeconfig.yaml
                    '''
                }
            }
        }

        stage('Build and Push Docker Images') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', 'dockerhub-creds') {
                        dir('app/blue') {
                            def blueImage = docker.build("sukanya996/flaskimg-app:blue")
                            blueImage.push()
                        }
                        dir('app/green') {
                            def greenImage = docker.build("sukanya996/flaskimg-app:green")
                            greenImage.push()
                        }
                    }
                }
            }
        }

        stage('Deploy Blue and Green') {
            steps {
                withEnv(["KUBECONFIG=${pwd()}/kubeconfig.yaml"]) {
                    sh '''
                        kubectl apply -f k8s/blue.yaml
                        kubectl apply -f k8s/green.yaml
                        kubectl apply -f k8s/svc.yaml
                    '''
                }
            }
        }

        stage('Validate Green Version') {
            steps {
                echo 'Validation step: Add health checks or test endpoints here.'
            }
        }

        stage('Switch Traffic to Green') {
            steps {
                withEnv(["KUBECONFIG=${pwd()}/kubeconfig.yaml"]) {
                    sh '''
                        kubectl patch svc flask-service -p '{"spec": {"selector": {"app": "flask", "version": "green"}}}'
                    '''
                }
            }
        }

        stage('Delete Blue') {
            steps {
                withEnv(["KUBECONFIG=${pwd()}/kubeconfig.yaml"]) {
                    sh 'kubectl delete deployment flask-blue || true'
                }
            }
        }
    }
}
