pipeline {
    agent any
    environment {
        // GCP credentials and project details
        ZONE = "us-central1-c"
        PROJECT_ID = "your-project-id"
        CLUSTER_NAME = "gke-cluster"
        GOOGLE_APPLICATION_CREDENTIALS = credentials('gcp-key')
        IMAGE_NAME = "canary-deploy"
        GKE_REGION = "us-central1"
        GREEN_DEPLOY = "k8s/green.yaml"
        BLUE_DEPLOY = "k8s/blue.yaml"
        SVC = "k8s/svc.yaml"
    }

    stages {
        stage('GCP Login') {
            steps {
                withCredentials([file(credentialsId: 'gcp-key', variable: 'GOOGLE_APPLICATION_CREDENTIALS')]) {
                    sh '''
                    echo "Using credentials from: $GOOGLE_APPLICATION_CREDENTIALS"
                    gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS
                    gcloud config set project $PROJECT_ID
                    '''
                }
            }
        }

        stage('Install Istio') {
            steps {
                script {
                    sh '''
                    # Download Istio CLI
                    curl -L https://istio.io/downloadIstio | sh -
                    cd istio-*
                    export PATH=$PWD/bin:$PATH
                    
                    # Install Istio with demo profile
                    istioctl install --set profile=demo -y
                    
                    # Verify installation
                    kubectl get pods -n istio-system
                    '''
                }
            }
        }

        stage('Enable Istio Sidecar Injection') {
            steps {
                script {
                    sh '''
                    # Enable Istio sidecar injection for the default namespace
                    kubectl label namespace default istio-injection=enabled
                    '''
                }
            }
        }

        stage('Create GKE Cluster') {
            steps {
                script {
                    // Terraform step to create GKE cluster
                    dir('terraform') {
                        sh '''
                        terraform init
                        terraform plan
                        terraform apply --auto-approve
                        '''
                    }
                }
            }
        }

        stage('Get GKE Credentials') {
            steps {
                script {
                    sh '''
                    gcloud container clusters get-credentials $CLUSTER_NAME --zone $ZONE --project $PROJECT_ID
                    '''
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                script {
                    sh '''
                    # Build Docker images for Blue and Green versions
                    docker build -t $IMAGE_NAME-blue -f app/blue/Dockerfile app/blue
                    docker build -t $IMAGE_NAME-green -f app/green/Dockerfile app/green
                    
                    # Tag images with the build number
                    docker tag $IMAGE_NAME-blue sukanya996/$IMAGE_NAME:blue-$BUILD_NUMBER
                    docker tag $IMAGE_NAME-green sukanya996/$IMAGE_NAME:green-$BUILD_NUMBER
                    '''
                }
            }
        }

        stage('Push Docker Images') {
            steps {
                script {
                    sh '''
                    # Push Docker images to Docker Hub
                    docker push sukanya996/$IMAGE_NAME:blue-$BUILD_NUMBER
                    docker push sukanya996/$IMAGE_NAME:green-$BUILD_NUMBER
                    '''
                }
            }
        }

        stage('Deploy Blue and Green Apps') {
            steps {
                script {
                    sh '''
                    # Deploy Blue and Green versions
                    kubectl apply -f $BLUE_DEPLOY
                    kubectl apply -f $GREEN_DEPLOY
                    kubectl apply -f $SVC
                    
                    # Wait for the deployments to stabilize
                    sleep 30
                    kubectl get svc
                    '''
                }
            }
        }

        stage('Create Istio VirtualService') {
            steps {
                script {
                    sh '''
                    # Define the Istio VirtualService for traffic splitting
                    kubectl apply -f - <<EOF
                    apiVersion: networking.istio.io/v1alpha3
                    kind: VirtualService
                    metadata:
                      name: flask-service
                    spec:
                      hosts:
                        - flask-service
                      http:
                        - route:
                            - destination:
                                host: flask-service
                                subset: blue  # Blue version
                              weight: 90   # 90% traffic to Blue
                            - destination:
                                host: flask-service
                                subset: green  # Green version (Canary)
                              weight: 10   # 10% traffic to Green (Canary)
                    EOF
                    '''
                }
            }
        }

        stage('Create Istio DestinationRule') {
            steps {
                script {
                    sh '''
                    # Define Istio DestinationRule for Blue and Green subsets
                    kubectl apply -f - <<EOF
                    apiVersion: networking.istio.io/v1alpha3
                    kind: DestinationRule
                    metadata:
                      name: flask-service
                    spec:
                      host: flask-service
                      subsets:
                        - name: blue
                          labels:
                            version: blue
                        - name: green
                          labels:
                            version: green
                    EOF
                    '''
                }
            }
        }

        stage('Switch Traffic to Green (Canary)') {
            steps {
                script {
                    sh '''
                    # Gradually increase traffic to the Green version (Canary)
                    kubectl patch virtualservice flask-service -p '{"spec": {"http": [{"route": [{"destination": {"host": "flask-service", "subset": "blue"}} ,{"destination": {"host": "flask-service", "subset": "green"}}]}]}}'
                    '''
                }
            }
        }

        stage('Cleanup (Optional)') {
            steps {
                script {
                    sh '''
                    # Delete Blue Deployment after Canary test
                    kubectl delete -f $BLUE_DEPLOY || echo "No blue deployment found"
                    '''
                }
            }
        }

        stage('Final Check') {
            steps {
                script {
                    sh '''
                    # Final check to make sure service is running
                    kubectl get svc
                    '''
                }
            }
        }
    }
}
